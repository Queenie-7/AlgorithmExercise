// 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。
// 输入n，打印出s的所有可能的值出现的概率。
// 需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

// 示例 1:
// 输入: 1
// 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]

// 示例 2:
// 输入: 2
// 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
//  
// 限制：
// 1 <= n <= 11

class Solution {
    public double[] twoSum(int n) {
        double[] pre = {1/6d,1/6d,1/6d,1/6d,1/6d,1/6d,};
        //从两个骰子到n个
        for(int i=2;i<=n;i++){
        	//点数和的个数6i-i+1=5i+1
            double[] cur = new double[5*i+1];
            //当前总点数=过去的+这次的点数
            for(int j = 0;j<pre.length;j++)
                for(int x=0;x<6;x++){
                    cur[j+x] += pre[j]/6;
                }
            pre=cur;
        }
        return pre;
    }
}