//实现函数double Power(double base, int exponent)，求base的exponent次方。
// 不得使用库函数，同时不需要考虑大数问题。
//
//        示例 1:
//        输入: 2.00000, 10
//        输出: 1024.00000

//        示例 2:
//        输入: 2.10000, 3
//        输出: 9.26100
//
//        示例 3:
//        输入: 2.00000, -2
//        输出: 0.25000
//        解释: 2^-2 = (1/2)^2 = 1/4 = 0.25
//         
//        说明:
//        -100.0 < x < 100.0
//        n 是 32 位有符号整数，其数值范围是 [−2^31, 2^31 − 1]

//思路：快速幂，二分思想，不断降幂，直至降到0.
//算法流程：
//        1.当 x = 0时：直接返回 0 （避免后续 x=1/x 操作报错）。
//        2.初始化 res = 1；
//        3.当 n < 0时：把问题转化至 n≥0 的范围内，即执行 x=1/x ，n=−n ；
//        4.循环计算：当 n = 0时跳出；
//          4.1 当 n&1=1 时,相当于 n%2 ：将当前 x 乘入 res；
//          4.2 执行 x = x^2
//          4.3 执行 n 右移一位,相当于 n//2。
//        5.返回 res。


class myPow{
    public double myPow(double x,int n){
            if(x==0) return 0;
            long b=n; //防止越界
            double res=1.0;
            if(b<0){
                x=1/x;
                b=-b;
            }
            while(b>0){
                if( (b & 1)==1)
                    res *=x;
                x *=x;
                b >>=1;
            }
            return res;
    }
}