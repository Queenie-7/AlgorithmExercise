//给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。
// 请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
//        答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
//

//        示例 1：
//        输入: 2
//        输出: 1
//        解释: 2 = 1 + 1, 1 × 1 = 1

//        示例 2:
//        输入: 10
//        输出: 36
//        解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
//
//        提示：
//        2 <= n <= 1000
// 思路：贪心，尽可能地分割为3，当余数为0时，全为3；当余数为1时，1*3<2*2,最后一段为4;等余数为2时，最后一段为2。
class cuttingRope2{
    public int cuttingRope(int n){
        if(n==2) return 1;
        if(n==3) return 2;
        int mod =(int)1e9 + 7;
        long res = 1;
        while(n>4){
            res *= 3;
            res %=mod;
            n -=3;
        }
        return (int)(res * n % mod);
    }
}