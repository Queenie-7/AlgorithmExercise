// 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。
// 请写程序找出这两个只出现一次的数字。
// 要求时间复杂度是O(n)，空间复杂度是O(1)。

// 示例 1：
// 输入：nums = [4,1,4,6]
// 输出：[1,6] 或 [6,1]

// 示例 2：
// 输入：nums = [1,2,10,4,1,4,3,3]
// 输出：[2,10] 或 [10,2]
//  
// 限制：
// 2 <= nums.length <= 10000

//位运算。异或， 异或满足交换律。
// 1.所有数一起异或，相同的数都抵消了，剩下两个不同的数，异或结果肯定有某一位为1，不然都是0的话就是相同数。
// 2.找到这个为1的位，不同的两个数一个在此位为0，另一个为1。
// 3.按此位0/1将所有数分成两组，各组一起异或。每组中，相同的两个数在同一组抵消，剩下的就是要找的数。
class Solution{
	public int[] singleNumbers(int[] nums){
		// 所有数一起异或结果sum
		int sum=0
		for(int num:nums)
			sum ^= num;

		// sum中最低位的1
		int mask=1;
		while（(sum & mask) ==0）{
			mask <<=1;
		}	

		// 分组异或找数
		int a=0,b=0;
		for(int num:nums){
			if((num & mask) ==0)
				a^=num;
			else 
				b^=num;
		}

		return new int[]{a,b};
	}
}